(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{101:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),u=n,m=p["".concat(i,".").concat(u)]||p[u]||b[u]||r;return a?o.a.createElement(m,l(l({ref:t},c),{},{components:a})):o.a.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},56:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(2),o=a(6),r=(a(0),a(101)),i={title:"Validating Protobufs",sidebar_label:"Validation",layout:"docs"},l={unversionedId:"validation",id:"validation",isDocsHomePage:!1,title:"Validating Protobufs",description:"scalapb-validate is a code generator that generates validation methods for your messages based on rules and constraints defined in the proto. It uses the same validation rules provided by protoc-gen-validate.",source:"@site/../docs/target/mdoc/validation.md",permalink:"/docs/validation",sidebar_label:"Validation",sidebar:"someSidebar",previous:{title:"Common protos",permalink:"/docs/common-protos"},next:{title:"Writing protoc plugins in Scala",permalink:"/docs/writing-plugins"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Using the generated code",id:"using-the-generated-code",children:[]},{value:"Validators",id:"validators",children:[]}],c={rightToc:s};function d(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"scalapb-validate")," is a code generator that generates validation methods for your messages based on rules and constraints defined in the proto. It uses the same validation rules provided by ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/envoyproxy/protoc-gen-validate"}),"protoc-gen-validate"),"."),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"In many situations, you may want to add validation rules for your messages. For example, you might want to enforce that a certain string field is an email address, or that a repeated field has at least one element."),Object(r.b)("p",null,"Such rules and constraints can be defined using custom options defined in ",Object(r.b)("inlineCode",{parentName:"p"},"validate/validate.proto"),". Here is an example taken from ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/envoyproxy/protoc-gen-validate/blob/master/README.md"}),"protoc-gen-validate's documentation"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\npackage examplepb;\n\nimport "validate/validate.proto";\n\nmessage Person {\n  uint64 id    = 1 [(validate.rules).uint64.gt    = 999];\n\n  string email = 2 [(validate.rules).string.email = true];\n\n  string name  = 3 [(validate.rules).string = {\n                      pattern:   "^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$",\n                      max_bytes: 256,\n                   }];\n\n  Location home = 4 [(validate.rules).message.required = true];\n\n  message Location {\n    double lat = 1 [(validate.rules).double = { gte: -90,  lte: 90 }];\n    double lng = 2 [(validate.rules).double = { gte: -180, lte: 180 }];\n  }\n}\n')),Object(r.b)("p",null,"scalapb-validate supports all the rules available in protoc-gen-validate and is tested with the same test harness containing over 900 test cases."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"Add the following to your ",Object(r.b)("inlineCode",{parentName:"p"},"project/plugins.sbt"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),'addSbtPlugin("com.thesamet" % "sbt-protoc" % "1.0.0-RC1")\n\nlibraryDependencies ++= Seq(\n    "com.thesamet.scalapb" %% "compilerplugin"           % "0.10.8",\n    "com.thesamet.scalapb" %% "scalapb-validate-codegen" % "0.1.2"\n)\n')),Object(r.b)("p",null,"Change your ",Object(r.b)("inlineCode",{parentName:"p"},"PB.targets")," to generate the validation code. The output directory must be the same as the one used for ",Object(r.b)("inlineCode",{parentName:"p"},"scalapb.gen"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),'PB.targets in Compile := Seq(\n  scalapb.gen() -> (sourceManaged in Compile).value / "scalapb",\n  scalapb.validate.gen() -> (sourceManaged in Compile).value / "scalapb"\n)\n\nlibraryDependencies ++= Seq(\n  "com.thesamet.scalapb" %% "scalapb-validate-core" % scalapb.validate.compiler.BuildInfo.version % "protobuf"\n)\n')),Object(r.b)("p",null,"Note that we are adding ",Object(r.b)("inlineCode",{parentName:"p"},"scalapb-validate-core")," as a ",Object(r.b)("inlineCode",{parentName:"p"},"protobuf")," dependency. This makes it possible to import ",Object(r.b)("inlineCode",{parentName:"p"},"validate/validate.proto")," from your own protos."),Object(r.b)("h2",{id:"using-the-generated-code"},"Using the generated code"),Object(r.b)("p",null,"Generated code for both ScalaPB and scalapb-validate is generated at compilation time. In ",Object(r.b)("inlineCode",{parentName:"p"},"sbt"),", just type ",Object(r.b)("inlineCode",{parentName:"p"},"compile"),"."),Object(r.b)("p",null,"In addition to the standard ScalaPB generated files, scalapb-validate will generate a validator object for each message based on its protoc-gen-validate rules. For a message named ",Object(r.b)("inlineCode",{parentName:"p"},"Msg")," the validator object will be named ",Object(r.b)("inlineCode",{parentName:"p"},"MsgValidator")," and will extend ",Object(r.b)("inlineCode",{parentName:"p"},"scalapb.validate.Validator[Msg]"),". An implicit instance of the validator is added to the companion object of each message, which makes it possible to write ",Object(r.b)("inlineCode",{parentName:"p"},"Validator[Msg]")," to obtain an instance of the validator."),Object(r.b)("h2",{id:"validators"},"Validators"),Object(r.b)("p",null,"The validator object is an object with a ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," method that takes an instance of a message and returns the validation result: The ",Object(r.b)("inlineCode",{parentName:"p"},"Validator[T]")," is defined as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"trait Validator[T] {\n  def validate(t: T): Result\n}\n")),Object(r.b)("p",null,"where ",Object(r.b)("inlineCode",{parentName:"p"},"Result")," is a data structure that can be either a ",Object(r.b)("inlineCode",{parentName:"p"},"Success")," or a ",Object(r.b)("inlineCode",{parentName:"p"},"Failure"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"sealed trait Result {\n  def isSuccess: Boolean\n  def isFailure: Boolean\n}\n\ncase object Success extends Result { ... }\n\ncase class Failure(violations: List[ValidationException]) extends Result { ... }\n")),Object(r.b)("p",null,"Therefore, the validation for the test person casn be run like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),'Validator[Person].validate(personInstance) match {\n  case Success             => println("Success!")\n  case Failure(violations) => println(violations)\n}\n')))}d.isMDXComponent=!0}}]);